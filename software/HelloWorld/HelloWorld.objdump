
HelloWorld.elf:     file format elf32-littlenios2
HelloWorld.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000298 memsz 0x00000298 flags r-x
    LOAD off    0x000012b8 vaddr 0x000012b8 paddr 0x000012bc align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000012c0 vaddr 0x000012c0 paddr 0x000012c0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000012bc  2**0
                  CONTENTS
  2 .text         00000280  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000012a0  000012a0  000012a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000012b8  000012bc  000012b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000012c0  000012c0  000012c0  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000012cc  000012cc  000012bc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  000012e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000bfc  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000710  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000007c9  00000000  00000000  00002774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001b0  00000000  00000000  00002f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005c6  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000172  00000000  00000000  000036b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00003828  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00003858  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000468a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  0000468d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004691  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004692  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00004693  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00004697  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000469b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  0000469f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002b  00000000  00000000  000046a2  2**0
                  CONTENTS, READONLY
 26 .jdi          0000447e  00000000  00000000  000046cd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00032a81  00000000  00000000  00008b4b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
000012a0 l    d  .rodata	00000000 .rodata
000012b8 l    d  .rwdata	00000000 .rwdata
000012c0 l    d  .bss	00000000 .bss
000012cc l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HelloWorld_bsp//obj/HAL/src/crt0.o
00001068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00001164 g     F .text	0000002c alt_main
000012bc g       *ABS*	00000000 __flash_rwdata_start
00001190 g     F .text	00000038 alt_putstr
00001244 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000001c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000012c4 g     O .bss	00000004 alt_argv
000092b8 g       *ABS*	00000000 _gp
0000124c g     F .text	00000038 alt_icache_flush
000012cc g       *ABS*	00000000 __bss_end
00001220 g     F .text	00000018 alt_dcache_flush_all
000012bc g       *ABS*	00000000 __ram_rwdata_end
000012b8 g       *ABS*	00000000 __ram_rodata_end
000012cc g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000011ec g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000004c _start
000011e8 g     F .text	00000004 alt_sys_init
000012b8 g       *ABS*	00000000 __ram_rwdata_start
000012a0 g       *ABS*	00000000 __ram_rodata_start
000012cc g       *ABS*	00000000 __alt_stack_base
000012c0 g       *ABS*	00000000 __bss_start
0000106c g     F .text	00000018 main
00001000 g       *ABS*	00000000 __alt_mem_RAM
000012c0 g     O .bss	00000004 alt_envp
000012b8 g     O .rwdata	00000004 JTAG
000012a0 g       *ABS*	00000000 __flash_rodata_start
000011c8 g     F .text	00000020 alt_irq_init
000012c8 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
000012bc g       *ABS*	00000000 _edata
000012cc g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00002000 g       *ABS*	00000000 __alt_data_end
0000101c g       .entry	00000000 _exit
00001284 g     F .text	0000001c strlen
00001238 g     F .text	0000000c alt_icache_flush_all
00001084 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    1000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    1004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    1008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    100c:	00bffd16 	blt	zero,r2,1004 <_gp+0xffff7d4c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1014:	08440814 	ori	at,at,4128
    jmp r1
    1018:	0800683a 	jmp	at

0000101c <_exit>:
    101c:	00000000 	call	0 <__alt_mem_RAM-0x1000>

Disassembly of section .text:

00001020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    1020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    1024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    1028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    102c:	00bffd16 	blt	zero,r2,1024 <_gp+0xffff7d6c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1034:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1038:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    103c:	d6a4ae14 	ori	gp,gp,37560
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1044:	1084b014 	ori	r2,r2,4800

    movhi r3, %hi(__bss_end)
    1048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    104c:	18c4b314 	ori	r3,r3,4812

    beq r2, r3, 1f
    1050:	10c00326 	beq	r2,r3,1060 <_start+0x40>

0:
    stw zero, (r2)
    1054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    105c:	10fffd36 	bltu	r2,r3,1054 <_gp+0xffff7d9c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1060:	00010840 	call	1084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1064:	00011640 	call	1164 <alt_main>

00001068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1068:	003fff06 	br	1068 <_gp+0xffff7db0>

0000106c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    106c:	01000034 	movhi	r4,0
 */

#include "sys/alt_stdio.h"

int main()
{ 
    1070:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    1074:	2104a804 	addi	r4,r4,4768
 */

#include "sys/alt_stdio.h"

int main()
{ 
    1078:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    107c:	00011900 	call	1190 <alt_putstr>
    1080:	003fff06 	br	1080 <_gp+0xffff7dc8>

00001084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1084:	deffff04 	addi	sp,sp,-4
    1088:	01000034 	movhi	r4,0
    108c:	01400034 	movhi	r5,0
    1090:	dfc00015 	stw	ra,0(sp)
    1094:	2104ae04 	addi	r4,r4,4792
    1098:	2944af04 	addi	r5,r5,4796

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    109c:	2140061e 	bne	r4,r5,10b8 <alt_load+0x34>
    10a0:	01000034 	movhi	r4,0
    10a4:	01400034 	movhi	r5,0
    10a8:	21040804 	addi	r4,r4,4128
    10ac:	29440804 	addi	r5,r5,4128
    10b0:	2140121e 	bne	r4,r5,10fc <alt_load+0x78>
    10b4:	00000b06 	br	10e4 <alt_load+0x60>
    10b8:	00c00034 	movhi	r3,0
    10bc:	18c4af04 	addi	r3,r3,4796
    10c0:	1907c83a 	sub	r3,r3,r4
    10c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    10c8:	10fff526 	beq	r2,r3,10a0 <_gp+0xffff7de8>
    {
      *to++ = *from++;
    10cc:	114f883a 	add	r7,r2,r5
    10d0:	39c00017 	ldw	r7,0(r7)
    10d4:	110d883a 	add	r6,r2,r4
    10d8:	10800104 	addi	r2,r2,4
    10dc:	31c00015 	stw	r7,0(r6)
    10e0:	003ff906 	br	10c8 <_gp+0xffff7e10>
    10e4:	01000034 	movhi	r4,0
    10e8:	01400034 	movhi	r5,0
    10ec:	2104a804 	addi	r4,r4,4768
    10f0:	2944a804 	addi	r5,r5,4768

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10f4:	2140101e 	bne	r4,r5,1138 <alt_load+0xb4>
    10f8:	00000b06 	br	1128 <alt_load+0xa4>
    10fc:	00c00034 	movhi	r3,0
    1100:	18c40804 	addi	r3,r3,4128
    1104:	1907c83a 	sub	r3,r3,r4
    1108:	0005883a 	mov	r2,zero
  {
    while( to != end )
    110c:	10fff526 	beq	r2,r3,10e4 <_gp+0xffff7e2c>
    {
      *to++ = *from++;
    1110:	114f883a 	add	r7,r2,r5
    1114:	39c00017 	ldw	r7,0(r7)
    1118:	110d883a 	add	r6,r2,r4
    111c:	10800104 	addi	r2,r2,4
    1120:	31c00015 	stw	r7,0(r6)
    1124:	003ff906 	br	110c <_gp+0xffff7e54>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1128:	00012200 	call	1220 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    112c:	dfc00017 	ldw	ra,0(sp)
    1130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1134:	00012381 	jmpi	1238 <alt_icache_flush_all>
    1138:	00c00034 	movhi	r3,0
    113c:	18c4ae04 	addi	r3,r3,4792
    1140:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1144:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1148:	18bff726 	beq	r3,r2,1128 <_gp+0xffff7e70>
    {
      *to++ = *from++;
    114c:	114f883a 	add	r7,r2,r5
    1150:	39c00017 	ldw	r7,0(r7)
    1154:	110d883a 	add	r6,r2,r4
    1158:	10800104 	addi	r2,r2,4
    115c:	31c00015 	stw	r7,0(r6)
    1160:	003ff906 	br	1148 <_gp+0xffff7e90>

00001164 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1164:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1168:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    116c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1170:	00011c80 	call	11c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1174:	00011e80 	call	11e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1178:	d1a00217 	ldw	r6,-32760(gp)
    117c:	d1600317 	ldw	r5,-32756(gp)
    1180:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1184:	dfc00017 	ldw	ra,0(sp)
    1188:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    118c:	000106c1 	jmpi	106c <main>

00001190 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1190:	defffe04 	addi	sp,sp,-8
    1194:	dc000015 	stw	r16,0(sp)
    1198:	dfc00115 	stw	ra,4(sp)
    119c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11a0:	00012840 	call	1284 <strlen>
    11a4:	01000034 	movhi	r4,0
    11a8:	000f883a 	mov	r7,zero
    11ac:	100d883a 	mov	r6,r2
    11b0:	800b883a 	mov	r5,r16
    11b4:	2104ae04 	addi	r4,r4,4792
#else
    return fputs(str, stdout);
#endif
#endif
}
    11b8:	dfc00117 	ldw	ra,4(sp)
    11bc:	dc000017 	ldw	r16,0(sp)
    11c0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11c4:	00011ec1 	jmpi	11ec <altera_avalon_jtag_uart_write>

000011c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11c8:	deffff04 	addi	sp,sp,-4
    11cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, NIOS);
    11d0:	00012440 	call	1244 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    11d4:	00800044 	movi	r2,1
    11d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    11dc:	dfc00017 	ldw	ra,0(sp)
    11e0:	dec00104 	addi	sp,sp,4
    11e4:	f800283a 	ret

000011e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    11e8:	f800283a 	ret

000011ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    11ec:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    11f0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    11f4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    11f8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    11fc:	2980072e 	bgeu	r5,r6,121c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1200:	38c00037 	ldwio	r3,0(r7)
    1204:	18ffffec 	andhi	r3,r3,65535
    1208:	183ffc26 	beq	r3,zero,11fc <_gp+0xffff7f44>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    120c:	28c00007 	ldb	r3,0(r5)
    1210:	20c00035 	stwio	r3,0(r4)
    1214:	29400044 	addi	r5,r5,1
    1218:	003ff806 	br	11fc <_gp+0xffff7f44>

  return count;
}
    121c:	f800283a 	ret

00001220 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    1220:	0005883a 	mov	r2,zero
    1224:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    1228:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    122c:	10800804 	addi	r2,r2,32
    1230:	10fffd1e 	bne	r2,r3,1228 <_gp+0xffff7f70>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1234:	f800283a 	ret

00001238 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    1238:	01440004 	movi	r5,4096
    123c:	0009883a 	mov	r4,zero
    1240:	000124c1 	jmpi	124c <alt_icache_flush>

00001244 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1244:	000170fa 	wrctl	ienable,zero
    1248:	f800283a 	ret

0000124c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    124c:	00840004 	movi	r2,4096
    1250:	1140012e 	bgeu	r2,r5,1258 <alt_icache_flush+0xc>
    1254:	100b883a 	mov	r5,r2
    1258:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    125c:	2005883a 	mov	r2,r4
    1260:	1140032e 	bgeu	r2,r5,1270 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    1264:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    1268:	10800804 	addi	r2,r2,32
    126c:	003ffc06 	br	1260 <_gp+0xffff7fa8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    1270:	210007cc 	andi	r4,r4,31
    1274:	20000126 	beq	r4,zero,127c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    1278:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    127c:	0000203a 	flushp
    1280:	f800283a 	ret

00001284 <strlen>:
    1284:	2005883a 	mov	r2,r4
    1288:	10c00007 	ldb	r3,0(r2)
    128c:	18000226 	beq	r3,zero,1298 <strlen+0x14>
    1290:	10800044 	addi	r2,r2,1
    1294:	003ffc06 	br	1288 <_gp+0xffff7fd0>
    1298:	1105c83a 	sub	r2,r2,r4
    129c:	f800283a 	ret
